include("./dev/jdiva_lib.jl")
using .jdiva

# read an geotiff file into sga
sga = SparseGeoArray{Float32,Int32}("./testdata/UKIRL/UKIRL_merit_coastplain_elecz_12m.tif")

# read an file into ga
#using GeoArrays
#ga = GeoArrays.read("./testdata/UKIRL/UKIRL_merit_coastplain_elecz_12m.tif")
#varinfo(r"ga")

# sga is much smaller
varinfo(r"sga")

# read an file into sgb
sgb = SparseGeoArray{Float64,Int64}("./testdata/UKIRL/UKIRL_merit_coastplain_elecz_12m.tif")
varinfo(r"sgb")

# do not be too ambtious!
sgb = SparseGeoArray{Float16,Int16}("./testdata/UKIRL/UKIRL_merit_coastplain_elecz_12m.tif")
varinfo(r"sgb")

# empty SparseGeoArray can be constructed ...
sgb = SparseGeoArray{Float32,Int32}()
# ... and fill per explicit read
readGEOTiffDataComplete(sgb,"./testdata/UKIRL/UKIRL_merit_coastplain_elecz_12m.tif")

# sizes as in usual Arrays
size(sga)
size(sga,1)
size(sga,2)

# access as in ususal Arrays
sga[1,2]

# which also works for assignment
sga[1,2] = 5.55

# nh4, nh8 available
nh8(sga,2,3)

# get a grid cell with existing data
sga.data
sga[9230, 9218]
nh8(sga, 9230, 9218)

# values in the neighbouhrhood can be obtained with a map
map(x -> sga[x[1],x[2]], nh8(sga, 2, 3))
map(x -> sga[x[1],x[2]], nh8(sga, 9230, 9218))

# geograpihcal goodies
coords(sga,1,1)
coords(sga,1,1,UpperLeft())
coords(sga,1,1,LowerRight())

area(sga,1,12000)
#0.005519184979401009
area(sga,24000,12000)
#0.005519184979401009
area(sga,1,1)
#0.004293271940180494
area(sga,24000,1)
#0.004293271940180494


