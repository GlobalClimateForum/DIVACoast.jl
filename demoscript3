include("./dev/jdiva_lib.jl")
using .jdiva

sgas_elev = Dict{Int32, SparseGeoArray{Float32,Int32}}()
sgas_pop  = Dict{Int32, SparseGeoArray{Float32,Int32}}()

sgas_exp_st = Array{Dict{Int32, SparseGeoArray{Float32,Int32}}}(undef,0)
sgas_exp_dy = Array{Dict{Int32, SparseGeoArray{Float32,Int32}}}(undef,2)

sgas_exp_dy[1] = sgas_pop
sgas_exp_dy[2] = sgas_pop

readGEOTiffDataCategorised(sgas_elev, "./testdata/UKIRL/UKIRL_merit_coastplain_elecz_20m.tif", "./testdata/UKIRL/UKIRL_merit_coastplain_lecz_H100+2m_partitioned_extension.tif", 1, 1)
readGEOTiffDataCategorised(sgas_exp_dy[1],  "./testdata/UKIRL/UKIRL_GHS_POP_E2020_GLOBE_R2023A_4326_3ss_V1_0_resampled.tif", "./testdata/UKIRL/UKIRL_merit_coastplain_lecz_H100+2m_partitioned_extension.tif", 1, 1)
readGEOTiffDataCategorised(sgas_exp_dy[2],  "./testdata/UKIRL/UKIRL_GHS_POP_E2020_GLOBE_R2023A_4326_3ss_V1_0_resampled.tif", "./testdata/UKIRL/UKIRL_merit_coastplain_lecz_H100+2m_partitioned_extension.tif", 1, 1)

exp_st_names = Array{String}(undef,0)
exp_dy_names = ["population","assets"]

test = toHypsometricProfileFlex(sgas_elev, sgas_exp_st, exp_st_names, sgas_exp_dy, exp_dy_names, 1.0f0, -5.0f0, 20.0f0, 0.1f0) 

empty!(sgas_elev)
empty!(sgas_exp_dy[1])
empty!(sgas_exp_dy[2])

sgas_exp_dy[1] = sgas_pop
sgas_exp_dy[2] = sgas_pop


readGEOTiffDataCategorised(sgas_elev, "./testdata/UKIRL/UKIRL_merit_coastplain_elecz_20m.tif", "./testdata/UKIRL/UKIRL_merit_coastline_segments_extended.tif", 1, 1)
readGEOTiffDataCategorised(sgas_exp_dy[1],  "./testdata/UKIRL/UKIRL_GHS_POP_E2020_GLOBE_R2023A_4326_3ss_V1_0_resampled.tif", "./testdata/UKIRL/UKIRL_merit_coastline_segments_extended.tif", 1, 1)
readGEOTiffDataCategorised(sgas_exp_dy[2],  "./testdata/UKIRL/UKIRL_GHS_POP_E2020_GLOBE_R2023A_4326_3ss_V1_0_resampled.tif", "./testdata/UKIRL/UKIRL_merit_coastline_segments_extended.tif", 1, 1)

test2 = toHypsometricProfileFlex(sgas_elev, sgas_exp_st, exp_st_names, sgas_exp_dy, exp_dy_names, 1.0f0, -5.0f0, 20.0f0, 0.1f0) 

println(sum(map(x -> exposure(test[x],10.0)[3][1], collect(keys(test)))))
println(sum(map(x -> exposure(test2[x],10.0)[3][1], collect(keys(test2)))))
